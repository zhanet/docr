#!/usr/bin/env python
# -*- coding:utf-8 -*-
import os, sys, time
import subprocess
import pyinotify
import psycopg2
import yaml

import importlib
importlib.reload(sys)

global CONFIG, DB_CONN

def plog(level, message):
    now = time.strftime("%Y-%m-%d %H:%M:%S")
    # level = ['DEBUG', 'INFO', 'ERROR'][level]
    print('%s [%s] %s' % (now, level, message))

def op_text(text):
    return text.replace('\x0C', '') #清除尾部特殊字符

def get_config(config_file):
    global CONFIG
    try:
        CONFIG = yaml.load(open(config_file))
    except yaml.YAMLError as e:
        print(e)
        sys.exit()

def get_dbconn(config):
    global DB_CONN
    try:
        DB_CONN = psycopg2.connect(
            user=config['postgres']['user'],
            password=config['postgres']['password'],
            dbname=config['postgres']['dbname'],
            host=config['postgres']['host'],
            port=config['postgres']['port']
        )
    except psycopg2.Error as e:
        print(e)
        sys.exit()

def call_ocr(upload_file, save_dir=''):
    if not upload_file:
        plog('ERROR', "The upload_file MUST be set.")
        return
    # Call tesseract to perform OCR processing
    cmd = 'tesseract -l chi_sim ' + upload_file + ' ' + upload_file
    plog('DEBUG', '%s' % (cmd))
    subprocess.getoutput(cmd)
    if not save_dir:
        os.remove(upload_file)
    else:
        save_file = save_dir + os.path.basename(upload_file)
        plog('INFO', '%s -> %s' % (upload_file, save_file))
        os.rename(upload_file, save_file)

def save_result(result_file, db_conn):
    if not result_file:
        plog('ERROR', "The result file MUST be set.")
        return
    # Read result text file generated by OCR
    try:
        with open(result_file, 'r') as f:
            ocr_result = f.read()
    except IOError as e:
        plog('ERROR', '%s' % e)
        return
    if not ocr_result:
        plog('DEBUG', "The ocr result is EMPTY.")
        return
    # Prepare data and delete file
    filename = os.path.basename(result_file)
    filename = os.path.splitext(filename)[0]  # remove .txt
    ocr_result = op_text(ocr_result)
    os.remove(result_file)
    # Save data to the database
    try:
        cursor = db_conn.cursor()
        sql = "INSERT INTO docr (cid, fname, ocr) VALUES (%s, %s, %s)"
        param = (0, filename, ocr_result)
        ret = cursor.execute(sql, param)
        db_conn.commit()
        cursor.close()
        plog('INFO', '%s ocr data is SAVE.' % (filename))
    except psycopg2.Error as e:
        plog('ERROR', 'DB: %s' % e)
        pass

def process_upload(event):
    full_name = os.path.join(event.path, event.name)
    ext = os.path.splitext(full_name)[1]
    global CONFIG, DB_CONN
    if ext == '.jpg' or ext == '.tif':
        call_ocr(full_name, CONFIG['save_dir'])
    if ext == '.txt':
        save_result(full_name, DB_CONN)

class EventHandler(pyinotify.ProcessEvent):
    def process_IN_MODIFY(self, event):
        plog('DEBUG', "MODIFY: %s" % os.path.join(event.path,event.name))
        process_upload(event)
    # def process_IN_CREATE(self, event):
    #     plog('DEBUG', "CREATE: %s" % os.path.join(event.path,event.name))
    # def process_IN_DELETE(self, event):
    #     plog('DEBUG', "DELETE: %s" % os.path.join(event.path,event.name))
    # def process_IN_CLOSE_WRITE(self, event):
    #     plog('DEBUG', "CLOSE_WRITE: %s" % os.path.join(event.path,event.name))
    # def process_IN_MOVED_FROM(self, event):
    #     plog('DEBUG', "MOVED_FROM: %s" % os.path.join(event.path,event.name))

def start_watch(path = '.'): 
    if not path:
        plog('ERROR', 'The watch path setting MUST be set.')
        sys.exit()
    if not os.path.exists(path):
        plog('ERROR', 'The watch path NOT exists: %s' % (path))
        sys.exit()
    watch_manager = pyinotify.WatchManager()
    event_notifier = pyinotify.ThreadedNotifier(watch_manager, EventHandler())
    # mask = pyinotify.IN_CREATE | pyinotify.IN_MODIFY | pyinotify.IN_CLOSE_WRITE 
    # watch_manager.add_watch(path, mask, rec = True, auto_add = True)
    # watch_manager.add_watch(path, pyinotify.ALL_EVENTS)
    watch_manager.add_watch(path, pyinotify.IN_MODIFY)
    event_notifier.start()
    plog('INFO', 'Start monitoring: %s' % path)
    while True:
        try: 
            event_notifier.process_events() 
            if event_notifier.check_events(): 
                event_notifier.read_events() 
        except KeyboardInterrupt: 
            event_notifier.stop()
            break 


if __name__ == "__main__": 
    dir_path = os.path.dirname(os.path.realpath(__file__))
    get_config(dir_path + '/config.yaml')
    get_dbconn(CONFIG)

    start_watch(CONFIG['upload_dir'])
